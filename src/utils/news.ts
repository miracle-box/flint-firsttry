import type { CollectionEntry } from 'astro:content';
import type { News } from '~/types';
import { getCollection } from 'astro:content';

/**
 *  Remove the leading year (i.e. [2023/]something.md) from a slug
 * @param ogSlug slug generated by Astro
 */
function getSlug(ogSlug: string) {
	return ogSlug.slice(5);
}

async function getNormalizedPage(page: CollectionEntry<'news'>): Promise<News> {
	const { id, slug, data } = page;
	const { title, desc, author, image, date } = data;
	const { Content } = await page.render();

	return {
		id,
		slug: getSlug(slug),
		Content,
		title,
		desc,
		author,
		image,
		date,
	};
}

async function load(): Promise<News[]> {
	const allNews = await getCollection('news');
	const renderPromises = allNews.map(async (page) => getNormalizedPage(page));

	const renderedNews = await Promise.all(renderPromises);

	// Sort by date in descending order.
	return renderedNews.sort((a, b) => Date.parse(b.date) - Date.parse(a.date));
}

let _pages: News[];
export async function fetchNews(): Promise<News[]> {
	if (!_pages) _pages = await load();
	return _pages;
}

export async function groupNewsByYear(): Promise<Record<number, News[]>> {
	const pages = await fetchNews();
	const pagesByYear: Record<number, News[]> = {};
	for (const p of pages) {
		const year = new Date(p.date).getFullYear();
		if (!pagesByYear[year]) pagesByYear[year] = [];
		pagesByYear[year]?.push(p);
	}

	return pagesByYear;
}
