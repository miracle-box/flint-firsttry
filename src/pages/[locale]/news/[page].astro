---
import type { GetStaticPathsResult, Page } from 'astro';
import type { Locales, News } from '~/types';
import Layout from '~/layouts/blank.astro';
import { locales } from '~/utils/i18n';
import { fetchNews } from '~/utils/news';

type Path = {
	params: {
		locale: Locales;
	};
	props: {
		contentProps: News;
	};
};

export async function getStaticPaths({
	paginate,
}: {
	// More strict typing for PaginateFunction
	paginate: (data: Path[], args: { params: Path['params']; pageSize: number }) => GetStaticPathsResult;
}) {
	const allPages = await fetchNews();

	return locales.map((locale) => {
		// The paginate function for each locale
		return paginate(
			allPages.map(
				(p): Path => ({
					// This is for page data
					params: { locale },
					props: { contentProps: p },
				}),
			),
			{
				// This is for paginating
				params: { locale },
				pageSize: 12,
			},
		);
	});
}

const page = Astro.props.page as Page<Path>;
---

<Layout>
	<div class="mx-auto grid w-full">
		<main class="order-2 m-8 grid gap-2 lg:mx-16">
			<header class="mb-6 text-center text-dp-lg font-semibold">News</header>

			<div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
				{
					page.data.map((p) => (
						<div class="flex flex-col gap-3 border-b border-b-gray-200 pb-6 text-gray-800">
							<a href={`../${p.props.contentProps.slug}/`}>
								<img
									src={p.props.contentProps.image}
									class="aspect-[800_/_425] w-full rounded-lg border object-cover"
								/>
							</a>
							<a href={`../${p.props.contentProps.slug}/`} class="text-xl font-bold leading-6">
								{p.props.contentProps.title}
							</a>
							<span class="text-gray-600">{p.props.contentProps.desc}</span>
							<div class="flex items-baseline gap-2">
								<span class="font-semibold">{p.props.contentProps.author}</span>
								<span class="text-sm text-gray-600">
									{new Date(p.props.contentProps.date).toLocaleDateString()}
								</span>
							</div>
						</div>
					))
				}
			</div>

			<div class="mt-6 flex justify-center gap-2">
				{
					page.url.prev && (
						<a
							class="rounded border border-primary-200 bg-primary-50 px-4 py-2 text-primary-800 hover:border-primary-400 hover:bg-primary-100"
							href={page.url.prev}
						>
							&lt;
						</a>
					)
				}
				<span class="rounded border border-gray-200 bg-gray-50 px-4 py-2 text-gray-800">
					{page.currentPage} / {page.lastPage}
				</span>
				{
					page.url.next && (
						<a
							class="rounded border border-primary-200 bg-primary-50 px-4 py-2 text-primary-800 hover:border-primary-400 hover:bg-primary-100"
							href={page.url.next}
						>
							&gt;
						</a>
					)
				}
			</div>
		</main>
	</div>
</Layout>
