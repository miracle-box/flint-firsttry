---
import type { Icon } from '~/types';
import WarningIcon from '~icons/octicon/alert-16';
import TipIcon from '~icons/octicon/info-16';
import SuccessIcon from '~icons/octicon/issue-closed-16';
import NoteIcon from '~icons/octicon/issue-opened-16';
import ErrorIcon from '~icons/octicon/x-circle-16';

type CalloutTypes = 'note' | 'tip' | 'success' | 'warning' | 'error';

const style: Record<CalloutTypes, string> = {
	note: 'border-gray-400 bg-gray-50 text-gray-800',
	tip: 'border-primary-400 bg-primary-50 text-primary-800',
	success: 'border-success-400 bg-success-50 text-success-800',
	warning: 'border-warning-400 bg-warning-50 text-warning-800',
	error: 'border-error-400 bg-error-50 text-error-800',
} as const;

const icons: Record<CalloutTypes, Icon> = {
	// WRITE THIS INTO types.ts
	note: NoteIcon,
	tip: TipIcon,
	success: SuccessIcon,
	warning: WarningIcon,
	error: ErrorIcon,
} as const;

type Props = {
	type?: keyof typeof style;
	title: string | false;
};

const type = Astro.props.type ?? 'note';
const IconComponent: Icon = icons[type];
const { title } = Astro.props;
---

<aside class="my-4 rounded-lg border px-5 py-4" class:list={style[type]}>
	{
		() => {
			if (title) {
				return (
					<p class="!mb-2 flex items-center gap-2 text-lg font-bold leading-[18px]">
						<IconComponent width={18} height={18} />
						<span>{title}</span>
					</p>
				);
			}
		}
	}
	<div class="flex items-start gap-2">
		{
			() => {
				if (!title) {
					return <IconComponent width={18} height={18} class="mt-[3px] flex-shrink-0" />;
				}
			}
		}
		<section class="clearmb"> 
			<slot />
		</section>
	</div>
</aside>

<style is:inline>
	.clearmb > :last-child {
		margin-bottom: 0;
	}
</style>
