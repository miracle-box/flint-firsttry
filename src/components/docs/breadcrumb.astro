---
import { loadLocale, i18nObject, getLocaleFromUrl } from '@utils/i18n';
import { siteConfig } from '~/config';
import { fetchDocs } from '~/utils/docs';

type Props = {
	filePath: string;
};

const { filePath } = Astro.props;

// Load i18n
const locale = getLocaleFromUrl(Astro.url.pathname);
await loadLocale(locale);
const t = i18nObject(locale);

// Grab info for each level in breadcrumb.
const allPages = await fetchDocs();
const fileDir = filePath.split('/').slice(0, -1);

const breadcrumb: Array<Record<'text' | 'url', string>> = fileDir.map((_, index, dirs) => {
	const path = dirs.slice(0, index + 1).join('/');

	// Find the localized page first.
	// if there is no localized page, use the one under default locale.
	const target =
		allPages.find((p) => p.id === `${path}/${locale}.mdx`) ??
		allPages.find((p) => p.id === `${path}/${siteConfig.site.defaultLocale}.mdx`);

	// Ensure the target is not undefined.
	if (!target)
		throw new Error(
			`Failed to generate breadcrumb: docs page ${path} was not found. ` +
				`(locale ${locale} and ${siteConfig.site.defaultLocale})`,
		);

	return { text: target.title, url: `/${locale}/docs/${target.slug}` };
});
---

<span>{t.docs.breadcrumbBase()}</span>
{
	breadcrumb.map((item) => (
		<>
			<span>/</span>
			<a href={item.url}>{item.text}</a>
		</>
	))
}
