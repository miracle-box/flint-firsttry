---
import type { News } from '../../../../schemas/news';
import type { NewsTag } from '../../../../types';
import type { GetStaticPathsResult, Page } from 'astro';
import Config from 'virtual:flint/config';
import Card from '../../../../components/news/card.astro';
import Pagination from '../../../../components/news/pagination.astro';
import Layout from '../../../../layouts/blank.astro';
import { locales } from '../../../../utils/i18n-path';
import { fetchNews } from '../../../../utils/news';
import { getPathname } from '../../../../utils/route';

// Typings for the card data
type ContentProps = {
	contentProps: News;
};

// Typings for the listing page
type PageProps = {
	pageProps: {
		tagData: NewsTag;
	};
};

// eslint-disable-next-line unicorn/prevent-abbreviations
type Params = {
	locale: string;
	tag: string;
};
type Path = {
	params: Params;
	props: PageProps;
};
type Props = PageProps & {
	page: Page<Path & { props: ContentProps }>;
};

export async function getStaticPaths({
	paginate,
}: {
	// More strict typing for PaginateFunction
	paginate: (data: Array<{ props: ContentProps }>, args: Path & { pageSize: number }) => GetStaticPathsResult;
}) {
	const allPages = await fetchNews();

	// For each locale, do the paginating process
	const result = locales.map((locale) => {
		// Find the articles with each tag, then do the paginate function
		return Object.entries(Config.modules.news.tags).map(([tag, tagData]) =>
			paginate(
				allPages
					.filter((p) => p.tags.includes(tag))
					// Content data (only requires pageProps)
					.map((p): { props: ContentProps } => ({ props: { contentProps: p } })),
				// Data used for the listing page (only requires pageProps)
				{ params: { locale, tag }, props: { pageProps: { tagData } }, pageSize: 12 },
			),
		);
	});

	// Convert level 3 recursion to level 2 recursion for Astro
	return result.flat(2);
}

const { page } = Astro.props;
const { tagData } = Astro.props.pageProps;
---

<Layout>
	<main class="container order-2 mx-auto grid w-full gap-2 p-8 lg:px-16">
		<header class="text-dp-lg text-center font-semibold">News</header>
		<span class="mx-auto mb-6 text-sm text-gray-600">tag: {tagData.name}</span>

		<div class="grid gap-8 border-b border-gray-200 pb-6 md:grid-cols-2 lg:grid-cols-3">
			{page.data.map((p) => <Card {...p.props.contentProps} />)}
		</div>

		<div class="mx-auto mt-6">
			{/* Prev and next page URLs does not include `BASE_URL` so this is a workaround */}
			<Pagination
				firstUrl="../1/"
				lastUrl={`../${page.lastPage}/`}
				prevUrl={page.url.prev && getPathname(page.url.prev)}
				nextUrl={page.url.next && getPathname(page.url.next)}
				current={page.currentPage}
				total={page.lastPage}
			/>
		</div>
	</main>
</Layout>
