---
import Config from 'virtual:flint/config';
import { fetchDocs } from '../utils/docs';
import { getPagePath } from '../utils/route';

type Props = {
	filePath: string;
};

const { filePath } = Astro.props;

// Load i18n
const { locale } = Astro.locals;
const t = Astro.locals.translations;

// Grab info for each level in breadcrumb.
const allPages = await fetchDocs();
const fileDir = filePath.split('/').slice(0, -1);

const breadcrumb: Array<Record<'text' | 'url', string>> = fileDir.map((_, index, dirs) => {
	const path = dirs.slice(0, index + 1).join('/');

	// Find the localized page first.
	// if there is no localized page, use the one under default locale.
	const target =
		allPages.find((p) => p.id === `${path}/${locale}.mdx` || p.id === `${path}/${locale}.md`) ??
		allPages.find(
			(p) => p.id === `${path}/${Config.defaultLocale}.mdx` || p.id === `${path}/${Config.defaultLocale}.md`,
		);

	// Ensure the target is not undefined.
	if (!target)
		throw new Error(
			`Failed to generate breadcrumb: file for docs page ${path} was not found. ` +
				`(locale ${locale} and ${Config.defaultLocale})`,
		);

	return { text: target.title, url: getPagePath(locale, 'docs', target.slug) };
});
---

<div class="breadcrumb">
	<a class="__link" href={getPagePath(locale, 'docs', 'main')}>{t.docs.breadcrumbBase()}</a>
	{
		breadcrumb.map((item) => (
			<>
				<span class="__separator">/</span>
				<a class="__link" href={item.url}>
					{item.text}
				</a>
			</>
		))
	}
</div>

<style>
	.breadcrumb {
		font-size: var(--font-sm-size);
		line-height: var(--font-sm-line-height);

		.__separator {
			color: var(--color-gray-800);
		}

		.__link {
			color: var(--color-gray-500);
			text-decoration: none;
		}
	}
</style>
