---
import type { DocsPageProps as Props } from './types';
import Config from 'virtual:flint/config';
import Layout from './layouts/docs-content.astro';
import { fetchDocs, getFallbackBySlugs, getLocalDocs } from './utils/docs';
import { locales } from './utils/i18n-path';

const { contentProps, pageProps } = Astro.props;

type Path = {
	params: {
		locale: string;
		slug: string;
	};
	props: {
		contentProps: typeof contentProps;
		pageProps: typeof pageProps;
	};
};

export async function getStaticPaths() {
	const paths = [];
	const allPages = await fetchDocs();

	paths.push(
		...allPages.map(
			(p): Path => ({
				params: { locale: p.locale, slug: p.slug },
				props: {
					contentProps: p,
					pageProps: { fallback: false, outdated: false },
				},
			}),
		),
	);

	// Fallback pages
	for (const locale of locales) {
		if (locale === Config.defaultLocale) continue;

		/* eslint-disable no-await-in-loop */
		const localDocs = await getLocalDocs(locale);
		const fallbackPages = await getFallbackBySlugs(localDocs.map(({ slug }) => slug));
		/* eslint-enable no-await-in-loop */

		paths.push(
			...fallbackPages.map(
				(p): Path => ({
					params: { locale, slug: p.slug },
					// Ensure we have fallbacked locale here.
					props: {
						contentProps: p,
						pageProps: { fallback: true, outdated: false },
					},
				}),
			),
		);
	}

	// Outdated pages
	const outdatedDefaultLocalePages = paths.filter(
		(page) => page.props.contentProps.locale === Config.defaultLocale && page.props.contentProps.outdated,
	);

	for (const outdatedPage of outdatedDefaultLocalePages) {
		const allOutdated = paths.filter((p) => p.props.contentProps.slug === outdatedPage.props.contentProps.slug);
		for (const p of allOutdated) p.props.pageProps.outdated = true;
	}

	return paths;
}
---

<Layout contentProps={contentProps} pageProps={pageProps}>
	<contentProps.Content />
</Layout>
